# Lines starting with a # are comments
#
# An example of a level layout is given here. 
# This is the same layout as in the HexGrid classes.
# This example grid is of size 3x5 (x times y).
#
#        _____     _____     _____
#    ___/     \___/     \___/     \
#   /   \ 0,4 /   \ 1,4 /   \ 2,4 /
#  < 0,3 >---< 1,3 >---< 2,3 >---<
#   \___/     \___/     \___/     \
#   /   \ 0,2 /   \ 1,2 /   \ 2,2 /
#  < 0,1 >---< 1,1 >---< 2,1 >---<
#   \___/ 0,0 \___/ 1,0 \___/ 2,0 \
#       \_____/   \_____/   \_____/
#
# This, simplified somewhat, is as follows:
#
# (0,3)  (1,3)  (2,3)
#    (0,2)  (1,2)  (2,2)
# (0,1)  (1,1)  (2,1)
#    (0,0)  (1,0)  (2,0)
#
# To create a level such as this, specify the cells, in the "natural 
# reading order", that is, in this example, the order (0,3), (1,3), (2,3),
# (0,2), (1,2), ... and so on. You can use newlines but are not required to.
# 
# Grid formatting:
#
# O or 0: An empty hexagon (o or the number both work fine)
# B: a blocked hexagon (filled with rock)
# M: missing hexagon (you need to specify cells missing from the middle with this)
# All other characters are considered to be comments and are ignored 
#
# First, specify the dimensions:

level.width = 3
level.height = 5

# Then, specify the level, row by row

# The string "data" tells the parser that level data follows
data

     O     O     M 
  O     B     O 
     O     O     M 
  O     O     O 
     O     O     M 

